{"version":3,"file":"index.browser.js","sources":["../src/listen.ts","../src/drafts.ts","../src/patch.ts","../src/syncingDataset.ts","../src/groqStore.ts","../src/browser/getDocuments.ts","../src/browser/support.ts","../src/browser/index.ts"],"sourcesContent":["import {Subscription, MutationEvent, Config, ApiError, EnvImplementations} from './types'\n\ntype EventSourceInstance = InstanceType<EnvImplementations['EventSource']>\n\nconst isNativeBrowserEventSource = (\n  eventSource: EventSourceInstance\n): eventSource is InstanceType<typeof globalThis.EventSource> =>\n  typeof window !== 'undefined' &&\n  eventSource.addEventListener === window.EventSource.prototype.addEventListener\n\nconst addEventSourceListener = (\n  eventSource: EventSourceInstance,\n  type: string,\n  listener: EventListener\n): void => {\n  if (isNativeBrowserEventSource(eventSource)) {\n    eventSource.addEventListener(type, listener, false)\n  }\n\n  // Polyfilled event source does not accept option parameter\n  eventSource.addEventListener(type, listener)\n}\n\nexport function listen(\n  EventSourceImpl: EnvImplementations['EventSource'],\n  config: Config,\n  handlers: {\n    open: () => void\n    error: (err: Error) => void\n    next: (event: MutationEvent) => void\n  }\n): Subscription {\n  const {projectId, dataset, token} = config\n  const headers = token ? {Authorization: `Bearer ${token}`} : undefined\n  const url = `https://${projectId}.api.sanity.io/v1/data/listen/${dataset}?query=*&effectFormat=mendoza`\n  const es = new EventSourceImpl(url, {withCredentials: true, headers})\n\n  addEventSourceListener(es, 'welcome', handlers.open)\n\n  addEventSourceListener(es, 'mutation', getMutationParser(handlers.next))\n\n  addEventSourceListener(es, 'channelError', (msg: any) => {\n    es.close()\n\n    let data\n    try {\n      data = JSON.parse(msg.data) as ApiError\n    } catch (err) {\n      handlers.error(new Error('Unknown error parsing listener message'))\n      return\n    }\n\n    handlers.error(\n      new Error(data.message || data.error || `Listener returned HTTP ${data.statusCode}`)\n    )\n  })\n\n  addEventSourceListener(es, 'error', (err: Event) => {\n    const origin = typeof window !== 'undefined' && window.location.origin\n    const hintSuffix = origin ? `, and that the CORS-origin (${origin}) is allowed` : ''\n    const errorMessage = isErrorLike(err) ? ` (${err.message})` : ''\n    handlers.error(\n      new Error(\n        `Error establishing listener - check that the project ID and dataset are correct${hintSuffix}${errorMessage}`\n      )\n    )\n  })\n\n  return {\n    unsubscribe: (): Promise<void> => Promise.resolve(es.close()),\n  }\n}\n\nfunction getMutationParser(cb: (event: MutationEvent) => void): (msg: any) => void {\n  return (msg: any) => {\n    let data\n    try {\n      data = JSON.parse(msg.data)\n    } catch (err) {\n      // intentional noop\n      return\n    }\n\n    cb(data)\n  }\n}\n\nfunction isErrorLike(err: unknown): err is {message: string} {\n  return typeof err === 'object' && err !== null && 'message' in err\n}\n","import {SanityDocument} from '@sanity/types'\n\nexport function isDraft(doc: SanityDocument): boolean {\n  return doc._id.startsWith('drafts.')\n}\n\nexport function getPublishedId(document: SanityDocument): string {\n  return isDraft(document) ? document._id.slice(7) : document._id\n}\n","import {SanityDocument} from '@sanity/types'\nimport {applyPatch} from 'mendoza'\n\nexport function applyPatchWithoutRev(\n  doc: SanityDocument | null,\n  patch: unknown[]\n): SanityDocument | null {\n  const patchDoc = {...doc} as Omit<SanityDocument, '_rev'>\n  delete patchDoc._rev\n  return applyPatch(patchDoc, patch)\n}\n","import {SanityDocument} from '@sanity/types'\nimport {listen} from './listen'\nimport {getPublishedId} from './drafts'\nimport {applyPatchWithoutRev} from './patch'\nimport {Config, EnvImplementations, MutationEvent, Subscription} from './types'\n\nconst DEBOUNCE_MS = 25\n\nfunction noop() {\n  return Promise.resolve()\n}\n\nexport function getSyncingDataset(\n  config: Config,\n  onNotifyUpdate: (docs: SanityDocument[]) => void,\n  {getDocuments, EventSource}: EnvImplementations\n): Subscription & {loaded: Promise<void>} {\n  const {\n    projectId,\n    dataset,\n    listen: useListener,\n    overlayDrafts,\n    documentLimit,\n    token,\n    includeTypes,\n  } = config\n\n  if (!useListener) {\n    const loaded = getDocuments({projectId, dataset, documentLimit, token, includeTypes})\n      .then(onUpdate)\n      .then(noop)\n    return {unsubscribe: noop, loaded}\n  }\n\n  const indexedDocuments = new Map<string, SanityDocument>()\n\n  // undefined until the listener has been set up and the initial export is done\n  let documents: SanityDocument[] | undefined\n\n  // holds any mutations that happen while fetching documents so they can be applied after updates\n  const buffer: MutationEvent[] = []\n\n  // Return a promise we can resolve once we've established a listener and reconciled any mutations\n  let onDoneLoading: () => void\n  let onLoadError: (error: Error) => void\n  const loaded = new Promise<void>((resolve, reject) => {\n    onDoneLoading = resolve\n    onLoadError = reject\n  })\n\n  // We don't want to flush updates while we're in the same transaction, so a normal\n  // throttle/debounce wouldn't do it. We need to wait and see if the next mutation is\n  // within the same transaction as the previous, and if not we can flush. Of course,\n  // we can't wait forever, so an upper threshold of X ms should be counted as \"ok to flush\"\n  let stagedDocs: SanityDocument[] | undefined\n  let previousTrx: string | undefined\n  let flushTimeout: NodeJS.Timer | undefined\n\n  const listener = listen(EventSource, config, {\n    next: onMutationReceived,\n    open: onOpen,\n    error: (error: Error) => onLoadError(error),\n  })\n\n  return {unsubscribe: listener.unsubscribe, loaded}\n\n  async function onOpen() {\n    const initial = await getDocuments({projectId, dataset, documentLimit, token, includeTypes})\n    documents = applyBufferedMutations(initial, buffer)\n    documents.forEach((doc) => indexedDocuments.set(doc._id, doc))\n    onUpdate(documents)\n    onDoneLoading()\n  }\n\n  function onMutationReceived(msg: MutationEvent) {\n    if (documents) {\n      applyMutation(msg)\n      scheduleUpdate(documents, msg)\n    } else {\n      buffer.push(msg)\n    }\n  }\n\n  function scheduleUpdate(docs: SanityDocument[], msg: MutationEvent) {\n    clearTimeout(flushTimeout)\n\n    if (previousTrx !== msg.transactionId && stagedDocs) {\n      // This is a new transaction, meaning we can immediately flush any pending\n      // doc updates if there are any\n      onUpdate(stagedDocs)\n      previousTrx = undefined\n    } else {\n      previousTrx = msg.transactionId\n      stagedDocs = docs.slice()\n    }\n\n    flushTimeout = setTimeout(onUpdate, DEBOUNCE_MS, docs.slice())\n  }\n\n  function onUpdate(docs: SanityDocument[]) {\n    stagedDocs = undefined\n    flushTimeout = undefined\n    previousTrx = undefined\n    onNotifyUpdate(overlayDrafts ? overlay(docs) : docs)\n  }\n\n  function applyMutation(msg: MutationEvent) {\n    if (!msg.effects || msg.documentId.startsWith('_.')) {\n      return\n    }\n\n    const document = indexedDocuments.get(msg.documentId) || null\n    replaceDocument(msg.documentId, applyPatchWithoutRev(document, msg.effects.apply))\n  }\n\n  function replaceDocument(id: string, document: SanityDocument | null) {\n    const current = indexedDocuments.get(id)\n    const docs = documents || []\n    const position = current ? docs.indexOf(current) : -1\n\n    if (position === -1 && document) {\n      // Didn't exist previously, but was now created. Add it.\n      docs.push(document)\n      indexedDocuments.set(id, document)\n    } else if (document) {\n      // Existed previously and still does. Replace it.\n      docs.splice(position, 1, document)\n      indexedDocuments.set(id, document)\n    } else {\n      // Existed previously, but is now deleted. Remove it.\n      docs.splice(position, 1)\n      indexedDocuments.delete(id)\n    }\n  }\n}\n\nfunction applyBufferedMutations(\n  documents: SanityDocument[],\n  mutations: MutationEvent[]\n): SanityDocument[] {\n  // Group by document ID\n  const groups = new Map<string, MutationEvent[]>()\n  mutations.forEach((mutation) => {\n    const group = groups.get(mutation.documentId) || []\n    group.push(mutation)\n    groups.set(mutation.documentId, group)\n  })\n\n  // Discard all mutations that happened before our current document\n  groups.forEach((group, id) => {\n    const document = documents.find((doc) => doc._id === id)\n    if (!document) {\n      // @todo handle\n      // eslint-disable-next-line no-console\n      console.warn('Received mutation for missing document %s', id)\n      return\n    }\n\n    // Mutations are sorted by timestamp, apply any that arrived after\n    // we fetched the initial documents\n    let hasFoundRevision = false\n    let current: SanityDocument | null = document\n    group.forEach((mutation) => {\n      hasFoundRevision = hasFoundRevision || mutation.previousRev === document._rev\n      if (!hasFoundRevision) {\n        return\n      }\n\n      if (mutation.effects) {\n        current = applyPatchWithoutRev(current, mutation.effects.apply)\n      }\n    })\n\n    // Replace the indexed documents\n    documents.splice(documents.indexOf(document), 1, current)\n  })\n\n  return documents\n}\n\nfunction overlay(documents: SanityDocument[]): SanityDocument[] {\n  const overlayed = new Map<string, SanityDocument>()\n\n  documents.forEach((doc) => {\n    const existing = overlayed.get(getPublishedId(doc))\n    if (doc._id.startsWith('drafts.')) {\n      // Drafts always overlay\n      overlayed.set(getPublishedId(doc), pretendThatItsPublished(doc))\n    } else if (!existing) {\n      // Published documents only override if draft doesn't exist\n      overlayed.set(doc._id, doc)\n    }\n  })\n\n  return Array.from(overlayed.values())\n}\n\n// Strictly speaking it would be better to allow groq-js to resolve `draft.<id>`,\n// but for now this will have to do\nfunction pretendThatItsPublished(doc: SanityDocument): SanityDocument {\n  return {...doc, _id: getPublishedId(doc)}\n}\n","import groq from 'groq'\nimport deepEqual from 'fast-deep-equal'\nimport {throttle} from 'throttle-debounce'\nimport {SanityDocument} from '@sanity/types'\nimport {parse, evaluate} from 'groq-js'\nimport {Config, EnvImplementations, GroqSubscription, GroqStore, Subscription} from './types'\nimport {getSyncingDataset} from './syncingDataset'\n\nexport function groqStore(config: Config, envImplementations: EnvImplementations): GroqStore {\n  let documents: SanityDocument[] = []\n  const executeThrottled = throttle(config.subscriptionThrottleMs || 50, executeAllSubscriptions)\n  const activeSubscriptions: GroqSubscription[] = []\n\n  let dataset: Subscription & {loaded: Promise<void>}\n\n  async function loadDataset() {\n    if (!dataset) {\n      dataset = getSyncingDataset(\n        config,\n        (docs) => {\n          documents = docs\n          executeThrottled()\n        },\n        envImplementations\n      )\n    }\n\n    await dataset.loaded\n  }\n\n  async function query<R = any>(groqQuery: string, params?: Record<string, unknown>): Promise<R> {\n    await loadDataset()\n    const tree = parse(groqQuery, {params})\n    const result = await evaluate(tree as any, {dataset: documents, params})\n    return result.get()\n  }\n\n  async function getDocument(documentId: string): Promise<SanityDocument | null> {\n    await loadDataset()\n    return query(groq`*[_id == $id][0]`, {id: documentId})\n  }\n\n  async function getDocuments(documentIds: string[]): Promise<(SanityDocument | null)[]> {\n    await loadDataset()\n    const subQueries = documentIds.map((id) => `*[_id == \"${id}\"][0]`).join(',\\n')\n    return query(`[${subQueries}]`)\n  }\n\n  function subscribe<R = any>(\n    groqQuery: string,\n    params: Record<string, unknown>,\n    callback: (error: Error | undefined, result?: R) => void\n  ): Subscription {\n    if (!config.listen) {\n      throw new Error('Cannot use `subscribe()` without `listen: true`')\n    }\n\n    // @todo Execute the query against an empty dataset for validation purposes\n\n    // Store the subscription so we can re-run the query on new data\n    const subscription = {query: groqQuery, params, callback}\n    activeSubscriptions.push(subscription)\n\n    let unsubscribed = false\n    const unsubscribe = () => {\n      if (unsubscribed) {\n        return Promise.resolve()\n      }\n\n      unsubscribed = true\n      activeSubscriptions.splice(activeSubscriptions.indexOf(subscription), 1)\n      return Promise.resolve()\n    }\n\n    executeQuerySubscription(subscription)\n    return {unsubscribe}\n  }\n\n  function executeQuerySubscription(subscription: GroqSubscription) {\n    return query(subscription.query, subscription.params)\n      .then((res) => {\n        if ('previousResult' in subscription && deepEqual(subscription.previousResult, res)) {\n          return\n        }\n\n        subscription.previousResult = res\n        subscription.callback(undefined, res)\n      })\n      .catch((err) => {\n        subscription.callback(err)\n      })\n  }\n\n  function executeAllSubscriptions() {\n    activeSubscriptions.forEach(executeQuerySubscription)\n  }\n\n  function close() {\n    executeThrottled.cancel()\n    return dataset ? dataset.unsubscribe() : Promise.resolve()\n  }\n\n  return {query, getDocument, getDocuments, subscribe, close}\n}\n","import {SanityDocument} from '@sanity/types'\nimport {EnvImplementations} from '../types'\n\ntype StreamError = {error: {description?: string; type: string}}\ntype StreamResult = SanityDocument | StreamError\n\nexport const getDocuments: EnvImplementations['getDocuments'] = async function getDocuments({\n  projectId,\n  dataset,\n  token,\n  documentLimit,\n  includeTypes = [],\n}: {\n  projectId: string\n  dataset: string\n  token?: string\n  documentLimit?: number\n  includeTypes?: string[]\n}): Promise<SanityDocument[]> {\n  const baseUrl = `https://${projectId}.api.sanity.io/v1/data/export/${dataset}`\n  const params =\n    includeTypes.length > 0 ? new URLSearchParams({types: includeTypes?.join(',')}) : ''\n  const url = `${baseUrl}?${params}`\n  const headers = token ? {Authorization: `Bearer ${token}`} : undefined\n  const response = await fetch(url, {credentials: 'include', headers})\n\n  if (response.status !== 200) {\n    throw new Error(`Error streaming dataset: ${getError(await response.json())}`)\n  }\n\n  const stream = getDocumentStream(response.body)\n  const reader = stream.getReader()\n\n  const documents: SanityDocument[] = []\n  let result\n  let document\n  do {\n    result = await reader.read()\n    document = result.value\n\n    if (isStreamError(document)) {\n      throw new Error(`Error streaming dataset: ${document.error}`)\n    } else if (document && isRelevantDocument(document)) {\n      documents.push(document)\n    }\n\n    if (documentLimit && documents.length > documentLimit) {\n      reader.cancel('Reached document limit')\n      throw new Error(\n        `Error streaming dataset: Reached limit of ${documentLimit} documents. Try using the includeTypes option to reduce the amount of documents, or increase the limit.`\n      )\n    }\n  } while (!result.done)\n\n  return documents\n}\n\nfunction getDocumentStream(body: Response['body']): ReadableStream<StreamResult> {\n  if (!body) {\n    throw new Error('Failed to read body from response')\n  }\n\n  let reader: ReadableStreamDefaultReader<Uint8Array> | undefined\n  let cancelled = false\n\n  function cancel() {\n    cancelled = true\n    if (reader) {\n      reader.cancel()\n    }\n  }\n\n  return new ReadableStream<SanityDocument>({\n    start(controller): void | PromiseLike<void> {\n      reader = body.getReader()\n      const decoder = new TextDecoder()\n      let buffer = ''\n\n      reader\n        .read()\n        .then(processResult)\n        .catch((err) => controller.error(err))\n\n      async function processResult(result: ReadableStreamReadResult<Uint8Array>): Promise<void> {\n        if (result.done) {\n          if (cancelled) {\n            return\n          }\n\n          buffer = buffer.trim()\n          if (buffer.length === 0) {\n            controller.close()\n            return\n          }\n\n          controller.enqueue(JSON.parse(buffer))\n          controller.close()\n          return\n        }\n\n        buffer += decoder.decode(result.value, {stream: true})\n        const lines = buffer.split('\\n')\n\n        for (let i = 0; i < lines.length - 1; ++i) {\n          const line = lines[i].trim()\n          if (line.length === 0) {\n            continue\n          }\n\n          try {\n            controller.enqueue(JSON.parse(line))\n          } catch (err) {\n            controller.error(err)\n            cancel()\n            return\n          }\n        }\n\n        buffer = lines[lines.length - 1]\n\n        if (!reader) {\n          return\n        }\n\n        try {\n          processResult(await reader.read())\n        } catch (err) {\n          controller.error(err)\n        }\n      }\n    },\n\n    cancel,\n  })\n}\n\nfunction isStreamError(result: StreamResult | undefined): result is StreamError {\n  if (!result) {\n    return false\n  }\n\n  if (!('error' in result) || typeof result.error !== 'object' || result.error === null) {\n    return false\n  }\n\n  return (\n    'description' in result.error &&\n    typeof (result as StreamError).error.description === 'string' &&\n    !('_id' in result)\n  )\n}\n\nfunction getError(body: any): string {\n  if (typeof body === 'object' && 'error' in body && 'message' in body) {\n    return body.message || body.error\n  }\n\n  return '<unknown error>'\n}\n\nfunction isRelevantDocument(doc: SanityDocument): boolean {\n  return !doc._id.startsWith('_.')\n}\n","export function assertEnvSupport(): void {\n  const required = ['EventSource', 'ReadableStream', 'fetch']\n  const unsupported = required.filter((api) => !(api in window))\n\n  if (unsupported.length > 0) {\n    throw new Error(`Browser not supported. Missing browser APIs: ${unsupported.join(', ')}`)\n  }\n}\n","import {groqStore as groqStoreApi} from '../groqStore'\nimport {Config, GroqStore} from '../types'\nimport {getDocuments} from './getDocuments'\nimport {assertEnvSupport} from './support'\n\n/** @public */\nexport function groqStore(config: Config): GroqStore {\n  assertEnvSupport()\n\n  const EventSource = config.EventSource ?? window.EventSource\n\n  if (config.token) {\n    if (!config.EventSource) {\n      throw new Error(\n        'When the `token` option is used the `EventSource` option must also be provided.'\n      )\n    }\n    if (config.EventSource === window.EventSource)\n      throw new Error(\n        'When the `token` option is used the `EventSource` option must also be provided. ' +\n          'EventSource cannot be `window.EventSource`, as it does not support passing a token.'\n      )\n  }\n\n  return groqStoreApi(config, {\n    EventSource,\n    getDocuments,\n  })\n}\n\nexport {default as groq} from 'groq'\nexport type {Subscription, GroqStore, EnvImplementations} from '../types'\n"],"names":["isNativeBrowserEventSource","eventSource","window","addEventListener","EventSource","prototype","addEventSourceListener","type","listener","listen","EventSourceImpl","config","handlers","projectId","dataset","token","headers","Authorization","url","es","withCredentials","open","getMutationParser","next","msg","close","data","JSON","parse","err","error","Error","message","statusCode","origin","location","hintSuffix","errorMessage","isErrorLike","unsubscribe","Promise","resolve","cb","isDraft","doc","_id","startsWith","getPublishedId","document","slice","applyPatchWithoutRev","patch","patchDoc","_rev","applyPatch","DEBOUNCE_MS","noop","getSyncingDataset","onNotifyUpdate","getDocuments","useListener","overlayDrafts","documentLimit","includeTypes","loaded","then","onUpdate","indexedDocuments","Map","documents","buffer","onDoneLoading","onLoadError","reject","stagedDocs","previousTrx","flushTimeout","onMutationReceived","onOpen","initial","applyBufferedMutations","forEach","set","applyMutation","scheduleUpdate","push","docs","clearTimeout","transactionId","setTimeout","overlay","effects","documentId","get","replaceDocument","apply","id","current","position","indexOf","splice","delete","mutations","groups","mutation","group","find","console","warn","hasFoundRevision","previousRev","overlayed","existing","pretendThatItsPublished","Array","from","values","groqStore","envImplementations","executeThrottled","throttle","subscriptionThrottleMs","executeAllSubscriptions","activeSubscriptions","loadDataset","query","groqQuery","params","tree","result","evaluate","getDocument","groq","documentIds","subQueries","map","join","subscribe","callback","subscription","unsubscribed","executeQuerySubscription","res","deepEqual","previousResult","catch","cancel","baseUrl","length","URLSearchParams","types","response","fetch","credentials","status","getError","json","stream","getDocumentStream","body","reader","getReader","read","value","isStreamError","isRelevantDocument","done","cancelled","ReadableStream","start","controller","decoder","TextDecoder","processResult","trim","enqueue","decode","lines","split","i","line","description","assertEnvSupport","required","unsupported","filter","api","_a","groqStoreApi"],"mappings":"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"}